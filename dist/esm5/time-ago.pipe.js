import { __decorate } from "tslib";
import { Pipe, PipeTransform, NgZone, ChangeDetectorRef, OnDestroy } from "@angular/core";
import { Translate } from './translate';
var TimeAgoPipe = /** @class */ (function () {
    function TimeAgoPipe(changeDetectorRef, ngZone) {
        this.changeDetectorRef = changeDetectorRef;
        this.ngZone = ngZone;
        this.translate = new Translate();
    }
    TimeAgoPipe.prototype.transform = function (value, locale) {
        var _this = this;
        this.removeTimer();
        var d = new Date(value);
        var now = new Date();
        var seconds = Math.round(Math.abs((now.getTime() - d.getTime()) / 1000));
        var timeToUpdate = this.getSecondsUntilUpdate(seconds) * 1000;
        this.timer = this.ngZone.runOutsideAngular(function () {
            if (typeof window !== 'undefined') {
                return window.setTimeout(function () {
                    _this.ngZone.run(function () { return _this.changeDetectorRef.markForCheck(); });
                }, timeToUpdate);
            }
            return null;
        });
        return this.getI18nMessage(seconds, locale || 'en');
    };
    TimeAgoPipe.prototype.getI18nMessage = function (seconds, locale) {
        var minutes = Math.round(Math.abs(seconds / 60));
        var hours = Math.round(Math.abs(minutes / 60));
        var days = Math.round(Math.abs(hours / 24));
        var months = Math.round(Math.abs(days / 30.416));
        var years = Math.round(Math.abs(days / 365));
        if (seconds <= 45) {
            return this.translate.translate(locale, 'a few seconds ago');
        }
        else if (seconds <= 90) {
            return this.translate.translate(locale, 'a minute ago');
        }
        else if (minutes <= 45) {
            return this.translate.translate(locale, 'minutes ago', { minutes: minutes });
        }
        else if (minutes <= 90) {
            return this.translate.translate(locale, 'an hour ago');
        }
        else if (hours <= 22) {
            return this.translate.translate(locale, 'hours ago', { hours: hours });
        }
        else if (hours <= 36) {
            return this.translate.translate(locale, 'a day ago');
        }
        else if (days <= 25) {
            return this.translate.translate(locale, 'days ago', { days: days });
        }
        else if (days <= 45) {
            return this.translate.translate(locale, 'a month ago');
        }
        else if (days <= 345) {
            return this.translate.translate(locale, 'months ago', { months: months });
        }
        else if (days <= 545) {
            return this.translate.translate(locale, 'a year ago');
        }
        else { // (days > 545)
            return this.translate.translate(locale, 'years ago', { years: years });
        }
    };
    TimeAgoPipe.prototype.ngOnDestroy = function () {
        this.removeTimer();
    };
    TimeAgoPipe.prototype.removeTimer = function () {
        if (this.timer) {
            window.clearTimeout(this.timer);
            this.timer = null;
        }
    };
    TimeAgoPipe.prototype.getSecondsUntilUpdate = function (seconds) {
        var min = 60;
        var hr = min * 60;
        var day = hr * 24;
        if (seconds < min) { // less than 1 min, update ever 2 secs
            return 2;
        }
        else if (seconds < hr) { // less than an hour, update every 30 secs
            return 30;
        }
        else if (seconds < day) { // less then a day, update every 5 mins
            return 300;
        }
        else { // update every hour
            return 3600;
        }
    };
    TimeAgoPipe.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: NgZone }
    ]; };
    TimeAgoPipe = __decorate([
        Pipe({
            name: 'timeAgo',
            pure: false
        })
    ], TimeAgoPipe);
    return TimeAgoPipe;
}());
export { TimeAgoPipe };
//# sourceMappingURL=data:application/json;base64,